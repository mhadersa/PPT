Q1)

class Solution(object):
    def diStringMatch(self, s):
        """
        :type s: str
        :rtype: List[int]
        """
        ans = []
        mini = 0
        maxi = len(s)

        for c in s:
            if c == 'I':
                ans.append(mini)
                mini += 1
            else:
                ans.append(maxi)
                maxi -= 1

        return ans + [mini]

Q2)

class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if not matrix:
            return False

        m = len(matrix)
        n = len(matrix[0])
        l = 0
        r = m * n

        while l < r:
            mid = (l + r) // 2
            i = mid // n
            j = mid % n
            if matrix[i][j] == target:
                return True
            if matrix[i][j] < target:
                l = mid + 1
            else:
                r = mid

        return False

Q3)

class Solution(object):
    def validMountainArray(self, arr):
        """
        :type arr: List[int]
        :rtype: bool
        """
        if len(arr) < 3:
            return False

        l = 0
        r = len(arr) - 1

        while l + 1 < len(arr) and arr[l] < arr[l + 1]:
            l += 1
        while r > 0 and arr[r] < arr[r - 1]:
            r -= 1

        return l > 0 and r < len(arr) - 1 and l == r

Q4)

class Solution(object):
    def findMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        ans = 0
        prefix = 0
        prefixToIndex = {0: -1}

        for i, num in enumerate(nums):
            prefix += 1 if num else -1
            ans = max(ans, i - prefixToIndex.setdefault(prefix, i))

        return ans

Q5)

class Solution(object):
    def minProductSum(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: int
        """
        return sum([a * b for a, b in zip(sorted(nums1), sorted(nums2, reverse=True))])

Q6)

class Solution(object):
    def findOriginalArray(self, changed):
        """
        :type changed: List[int]
        :rtype: List[int]
        """
        ans = []
        q = collections.deque()

        for num in sorted(changed):
            if q and num == q[0]:
                q.popleft()
            else:
                q.append(num * 2)
                ans.append(num)

        return [] if q else ans

Q7)

class Solution(object):
    def generateMatrix(self, n):
        """
        :type n: int
        :rtype: List[List[int]]
        """
        ans = [[0] * n for _ in range(n)]
        count = 1

        for min in range(n // 2):
            max = n - min - 1
            for i in range(min, max):
                ans[min][i] = count
                count += 1
            for i in range(min, max):
                ans[i][max] = count
                count += 1
            for i in range(max, min, -1):
                ans[max][i] = count
                count += 1
            for i in range(max, min, -1):
                ans[i][min] = count
                count += 1

        if n & 1:
            ans[n // 2][n // 2] = count

        return ans

Q8)

class Solution(object):
    def multiply(self, mat1, mat2):
        """
        :type mat1: List[List[int]]
        :type mat2: List[List[int]]
        :rtype: List[List[int]]
        """
        m = len(mat1)
        n = len(mat2)
        l = len(mat2[0])
        ans = [[0] * l for _ in range(m)]

        for i in range(m):
            for j in range(l):
                for k in range(n):
                    ans[i][j] += mat1[i][k] * mat2[k][j]

        return ans