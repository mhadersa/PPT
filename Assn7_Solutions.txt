Q1)

class Solution(object):
    def isIsomorphic(self, s, t):
        return [*map(s.index, s)] == [*map(t.index, t)]
Q2)

class Solution(object):
    def isStrobogrammatic(self, num):
        rotated = ['0', '1', 'x', 'x', 'x',
               'x', '9', 'x', '8', '6']
        l = 0
        r = len(num) - 1

        while l <= r:
            if num[l] != rotated[ord(num[r]) - ord('0')]:
                return False
            l += 1
            r -= 1

        return True
Q3)

class Solution(object):
    def addStrings(self, num1, num2):
        """
        :type num1: str
        :type num2: str
        :rtype: str
        """
        res = []
        k = 0
        i = len(num1) - 1
        j = len(num2) - 1

        while i >= 0 or j >= 0 or k:
            if i >= 0:
                k += int(num1[i])
            if j >= 0:
                k += int(num2[j])
            res.append(str(k % 10))
            k //= 10
            i -= 1
            j -= 1

        return ''.join(res[::-1])

Q4)

class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        return " ".join(s.split(" ")[::-1])[::-1]


Q5)

class Solution(object):
    def reverseStr(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: str
        """
        return s[:k][::-1] + s[k:2 * k] + self.reverseStr(s[2 * k:], k) if s else ""


Q6)


class Solution(object):
    def rotateString(self, s, goal):
        """
        :type s: str
        :type goal: str
        :rtype: bool
        """
        return (len(s) == len(goal) and goal in (s + s) )

Q7)

class Solution(object):
    def backspaceCompare(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        def backspace(s):
            stack = []
            for i in s:
                if i != '#':
                    stack.append(i)
                elif stack:
                    stack.pop()
            return stack

        return backspace(s) == backspace(t)

Q8)

 class Solution(object):
    def checkStraightLine(self, coordinates):
        """
        :type coordinates: List[List[int]]
        :rtype: bool
        """
        x1, y1 = coordinates[0]
        x2, y2 = coordinates[1]
        for x, y in coordinates[2:]:
            if (x - x1) * (y2 - y1) != (y - y1) * (x2 - x1):
                return False
        return True