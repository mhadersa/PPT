Q1)

class Solution(object):
    def minimumDeleteSum(self, s1, s2):
        """
        :type s1: str
        :type s2: str
        :rtype: int
        """
        l1, l2 = len(s1), len(s2)
        dp = [[0] * (l2 + 1) for _ in range(l1 + 1)]
        for i in range(1, l1 + 1):
            for j in range(1, l2 + 1):
                if s1[i - 1] == s2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + ord(s1[i - 1])
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        result = sum(map(ord, s1 + s2)) - dp[-1][-1] * 2
        return result
Q2)

class Solution(object):
    def checkValidString(self, s):
        """
        :type s: str
        :rtype: bool
        """
        l = 0
        h = 0

        for i in s:
            if i == '(':
                l += 1
                h += 1
            elif i == ')':
                if l > 0:
                    l -= 1
                h -= 1
            else:
                if l > 0:
                    l -= 1
                h += 1
            if h < 0:
                return False
        return l == 0
Q3)

class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        m, n = len(word1), len(word2)
        if m < n: 
            word1, word2, m, n = word2, word1, n, m
        dpOld, dpNew = [0] * (n + 1), [0] * (n + 1)
        for c1 in word1:
            for j in range(n):
                dpNew[j+1] = dpOld[j] + 1 if c1 == word2[j] else max(dpNew[j], dpOld[j+1])
            dpOld, dpNew = dpNew, dpOld
        return m + n - 2 * dpOld[n]

Q4)

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def str2tree(self, s):
        """
        :type s: str
        :rtype: TreeNode
        """
        def dfs(s):
            if not s:
                return None
            p = s.find('(')
            if p == -1:
                return TreeNode(int(s))
            root = TreeNode(int(s[:p]))
            start = p
            cnt = 0
            for i in range(p, len(s)):
                if s[i] == '(':
                    cnt += 1
                elif s[i] == ')':
                    cnt -= 1
                if cnt == 0:
                    if not root.left: # or, 'if start == p:'
                        root.left = dfs(s[start + 1 : i])
                        start = i + 1
                    else:
                        root.right = dfs(s[start + 1 : i])
            return root

        return dfs(s)
Q5)

class Solution(object):
    def compress(self, chars):
        """
        :type chars: List[str]
        :rtype: int
        """
        res = 0
        i = 0
        while i < len(chars):
            alpha = chars[i]
            count = 0
            while i < len(chars) and chars[i] == alpha:
                count += 1
                i += 1
            chars[res] = alpha
            res += 1
            if count > 1:
                for c in str(count):
                    chars[res] = c
                    res += 1
        return res
Q6)

class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        res = []
        count = collections.Counter(p)
        new = len(p)

        for r, c in enumerate(s):
            count[c] -= 1
            if count[c] >= 0:
                new -= 1
            if r >= len(p):
                count[s[r - len(p)]] += 1
                if count[s[r - len(p)]] > 0:
                    new += 1
            if new == 0:
                res.append(r - len(p) + 1)

        return res
Q7)

class Solution(object):
    def decodeString(self, s):
        """
        :type s: str
        :rtype: str
        """
        res = []  
        oldStr = ''
        newNum = 0

        for c in s:
            if c.isdigit():
                newNum = newNum * 10 + int(c)
            else:
                if c == '[':
                    res.append((oldStr, newNum))
                    oldStr = ''
                    newNum = 0
                elif c == ']':
                    prevStr, num = res.pop()
                    oldStr = prevStr + num * oldStr
                else:
                    oldStr += c

        return oldStr

Q8)

class Solution(object):
    def buddyStrings(self, s, goal):
        """
        :type s: str
        :type goal: str
        :rtype: bool
        """
        if len(s) != len(goal):
            return False
        if s == goal and len(set(s)) < len(goal):
            return True
        diff = [(i, j) for i, j in zip(s, goal) if i != j]
        return len(diff) == 2 and diff[0] == diff[1][::-1]
