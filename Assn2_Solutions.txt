Q1)

class Solution(object):
    def arrayPairSum(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        c= 0
        nums1=[]
        nums1=(sorted(nums)[::2])
        c = sum(nums1)
        return c
        

Q2)

class Solution(object):
    def distributeCandies(self, candyType):
        """
        :type candyType: List[int]
        :rtype: int
        """
        res =0
        res = min(len(candyType) // 2, len(set(candyType)))
        return res
Q3)

class Solution(object):
    def findLHS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        k = 0
        c = collections.Counter(nums)

        for num, freq in c.items():
            if num + 1 in c:
                k = max(k, freq + c[num + 1])

        return k





Q4)
class Solution(object):
    def canPlaceFlowers(self, flowerbed, n):
        """
        :type flowerbed: List[int]
        :type n: int
        :rtype: bool
        """
        i = 0
        flower =0
        for i, flower in enumerate(flowerbed):
            if flower == 0 and (i == 0 or flowerbed[i-1]==0) and (i==len(flowerbed)-1 
                or flowerbed[i+1] == 0):
                flowerbed[i] = 1
                n-=1
            if n<= 0:
                return True
        return False

Q5)

class Solution(object):
    def maximumProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        Prod =0
        nums.sort()
        Prod =  max(nums[-1] * nums[0] * nums[1],
               nums[-1] * nums[-2] * nums[-3])
        return Prod

Q6)
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if target in nums:
            return nums.index(target)
        else: 
            return -1

Q7)

class Solution(object):
    def isMonotonic(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        i =0 
        return (all(nums[i]<=nums[i+1] for i in range(len(nums)-1)) or 
                all(nums[i]>=nums[i+1] for i in range(len(nums)-1)))


Q8)

class Solution(object):
    def smallestRangeI(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        res = 0
        res = max(0, max(nums) - min(nums) - 2 * k)
        return res

        
