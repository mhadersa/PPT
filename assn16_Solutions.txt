1)
def NFG(a, n):

	if (n <= 0):
		print("List empty")
		return []
	stack = [0]*n
	freq = {}
	for i in a:
		freq[a[i]] = 0
	for i in a:
		freq[a[i]] += 1
	res = [0]*n
	top = -1
	top += 1
	stack[top] = 0
	for i in range(1, n):
		if (freq[a[stack[top]]] > freq[a[i]]):
			top += 1
			stack[top] = i
		else:
			while (top > -1 and freq[a[stack[top]]] < freq[a[i]]):
				res[stack[top]] = a[i]
				top -= 1
			stack[top] = i
	while (top > -1):
		res[stack[top]] = -1
		top -= 1
	return res

2)
def sortStack ( stack ):
    tmpStack = createStack()
    while(isEmpty(stack) == False):
        tmp = top(stack)
        pop(stack)
        while(isEmpty(tmpStack) == False and
             int(top(tmpStack)) < int(tmp)):
            push(stack,top(tmpStack))
            pop(tmpStack)
        push(tmpStack,tmp)
     return tmpStack
def createStack():
    stack = []
    return stack
def isEmpty( stack ):
    return len(stack) == 0
def push( stack, item ):
    stack.append( item )
def top( stack ):
    p = len(stack)
    return stack[p-1]
def pop( stack ):
    if(isEmpty( stack )):
        print("Stack Underflow ")
        exit(1)
 
    return stack.pop()

3)
class Stack:
    def __init__(self):
        self.items = []
      
    def isEmpty(self):
        return self.items == []
      
    def push(self, item):
        self.items.append(item)
      
    def pop(self):
        return self.items.pop()
      
    def peek(self):
        return self.items[len(self.items)-1]
      
    def size(self):
        return len(self.items)
          
def deleteMid(st, n, curr) :
    if (st.isEmpty() or curr == n) :
        return
    x = st.peek()
    st.pop()
      
    deleteMid(st, n, curr+1)

    if (curr != int(n/2)) :
        st.push(x)

while (st.isEmpty() == False) :
    p = st.peek()
    st.pop()
    print (str(p) + " ", end="")

4)
def checkSorted(n, q):
    st = []
    expected = 1
    fnt = None
    while (not q.empty()):
        fnt = q.queue[0]
        q.get()
        if (fnt == expected):
            expected += 1
 
        else:
            if (len(st) == 0):
                st.append(fnt)
            elif (len(st) != 0 and st[-1] < fnt):
                return False
            else:
                st.append(fnt)
        while (len(st) != 0 and
                   st[-1] == expected):
            st.pop()
            expected += 1
    if (expected - 1 == n and len(st) == 0):
        return True
 
    return False
 
    if checkSorted(n, q):
        print("Yes")
    else:
        print("No")

5)
st = [];
def push_digits(number):

	while (number != 0):
		st.append(number % 10);
		number = int(number / 10);
def reverse_number(number):
	push_digits(number);
	
	reverse = 0;
	i = 1;
	while (len(st) > 0):
		reverse = reverse + (st[len(st) - 1] * i);
		st.pop();
		i = i * 10;
	return reverse;
6)
def reverseQueueFirstKElements(k, Queue):
    if (Queue.empty() == True or
            k > Queue.qsize()):
        return
    if (k <= 0):
        return
 
    Stack = []
    for i in range(k):
        Stack.append(Queue.queue[0])
        Queue.get()
    while (len(Stack) != 0):
        Queue.put(Stack[-1])
        Stack.pop()
    for i in range(Queue.qsize() - k):
        Queue.put(Queue.queue[0])
        Queue.get()
def Print(Queue):
    while (not Queue.empty()):
        print(Queue.queue[0], end=" ")
        Queue.get()

7)
def removeConsecutiveSame(v):
    st = []
    for i in range(len(v)):
        if (len(st) == 0):
            st.append(v[i])
        else:
            Str = st[-1]
            if (Str == v[i]):
                st.pop()
            else:
                st.append(v[i])
    return len(st)

8)
def leftsmaller(arr, n, SE):
    sta = []
    for i in range(n):
        while(sta != [] and sta[len(sta)-1] >= arr[i]):
            sta.pop()
        if(sta != []):
            SE[i]=sta[len(sta)-1]
        else:
            SE[i]=0
        sta.append(arr[i])

def findMaxDiff(arr, n):
    ls=[0]*n 
    rs=[0]*n 
    leftsmaller(arr, n, ls)
    leftsmaller(arr[::-1], n, rs)
    res = -1
    for i in range(n):
        res = max(res, abs(ls[i] - rs[n-1-i]))
    return res